'use strict'
//1
////напишите функцию накопитель store, которая принимает параметр 
////и возвращает сумму всех параметров, переданных ей при всех вызовах.
////store(5)=5;
////store(8)=13; (в предыдущем вызове передали 5)
////изменить сумму аргументов не вызывая функции невозможно



//2
////Разработайте функцию createStore, которая которая позволяет создавать несколько 
////экземпляров хранишищ из первого задания



//3
////Разработайте класс Car для создания объектов, которые описывают автомобили на стоянке.
////конструктор принимает строку формата "brand-model-id-driver:Ф И О-owner:Ф И O"
////либо "brand-model-id-driver:Ф И О" если водитель и собственник это один человек
////Объект содержит следующие ствойства:
////brand -- марка (строка) (доступно для чтения и записи)
////model -- модель (строка) (доступно для чтения и записи)
////id -- гос номер (строка) (доступно для чтения и записи)
////owner -- владелец автомобиля (Объект) (доступно для чтения и записи)
////driver -- водитель (Объект) (доступно для чтения и записи)
////поля owner и driver - это объекты с полями\
////surname -- фамилия (доступно для чтения и записи)
////name -- имя (доступно для чтения и записи)
////patronymic -- отчество (доступно для чтения и записи) (может отсутствовать)
////fullName -- полное имя, например Петров Иван Иванович (доступно для чтения и записи)
////shortName -- фамилия и инициалы , например Петров И. И.



//4 Разработайте класс Parking для создания объектов описывающих автостоянки.  
////Автостояна содержит следующие поля:
////id -- уникальный номер ( только для чтения, указывается при создании стоянки)
////address --адрес ( только для чтения, указывается при создании стоянки)
////maxCount -- количество мест
////rate -- тариф за час
////carCount -- количество авто на стоянке (только для чтения)
////freePlaces -- количество свободных мест (только для чтения)
////Автостояна содержит следующие методы:
////addCar -- добавляет авто на стоянку. К автомобилю добавляется время въезда и номер местаю метод возвращает номер места
////removeCar -- убрать автомобиль со стоянки. Освобождает место, возвращает полную стоимость стоянки время в часах*тариф
////getInfo -- возвращает объект который содержит статистику по стоянке
////carCount -- количество авто на стоянке
////freePlaces -- количество свободных мест
////maxTime -- максимальное время на стоянке среди автомобилей, которые сейчас на стоянке 
////minTime -- минимальное время на стоянке среди автомобилей, которые сейчас на стоянке 
////avgTime -- среднее время на стоянке среди автомобилей, которые сейчас на стоянке 



//5
////разработайте класс List для создания списков 
////список имеет следующие методы
////add(element) - добавляет элемент в конец списка
////addFirst(element) - добавляет элемент в начало списка
////addAt(element, position) -- добавляет элемент перед элементом на указанной позиции или в конец списка, если номер позиции больше длины списка.
////remove(element) -- удаляет элемент из списка
////removeAt(element) -- удаляет элемент из из указанной позиции. Оставшиеся элементы сдвигаются
////sort(func) -- сортирует список порядок сортировки определяется функицей(аналогично сортировке массивов)
////clear() -- чистит список
////Предусмотрите возможность вызова методов цепоской
////Например: (new List()).add().add().sort()...



//6
////Напишите конструктор Calculator, который создаёт расширяемые объекты-калькуляторы.
////калькулятор имеет метод calculate который принимает строку формата «ЧИСЛО операция ЧИСЛО» (2+3) и возвращает результат операции
////калькулятор имеет метод addMethod(name, func), который учит калькулятор новой операции. Он получает имя операции name и функцию от двух аргументов \
////func(a,b), которая должна её реализовывать.
////Например
//// var powerCalc = new Calculator;
////powerCalc.addMethod("*", function(a, b) {
//// return a * b;
//});
////powerCalc.addMethod("/", function(a, b) {
////  return a / b;
////});
////powerCalc.addMethod("**", function(a, b) {
////  return Math.pow(a, b);
////});
////var result = powerCalc.calculate("2 ** 3");
////alert( result ); // 8