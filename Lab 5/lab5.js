'use strict'
//1
////Необходимо создать модуль, который используя функциональный стиль описывает класс CustomArray
////Конструктор может принимать неограниченное количество параметров, которые будут добавлены как элементы созданного псевдомассива
////Класс используется для создания объектов аналогичных стандартным массивам.
////Класс должен реализовывать следующие возможности массивов:
//// доступ к элементам по индексу
//// свойство length
//// методы push/pop, shift/unshift, slice, splice,  sort, indexOf/lastIndexOf, includes, join, concat
//// перебирающие методы forEach, reduce
//// Сигнатуры с действия методов аналогичны методам стандартных массивов
//// Стандартные массивы использовать ЗАПРЕЩАЕТСЯ

//разработайте пример использования

function CustomArray() {
    for (var i = 0; i < arguments.length; i++) this[i] = arguments[i];
    this.length = i;
    
     
    this.insertItems = function(startIndex) {
        var count = arguments[1].length;
        var items = arguments[1];
        var newLength = this.length + count;
        var countToMove = 0;
        
        if(startIndex <= this.length - 1) {
            countToMove = this.length - startIndex;
        }
        
        for(var i = countToMove, j = 0; i > 0; j++, i--) {
            this[newLength - 1 - j] = this[this.length - 1 - j];            
        }
        
        for(var i = 0; i < count; i++) {
            this[startIndex + i] = items[i];
        }
        
        this.length = newLength;
    }
    
}

//2
////Необходимо создать модуль, который используя функциональный стиль описывает класс TypedArray
////Класс является наследником от класса CustomArray, и используется для создания псевдомассивов, клоторые содержат только элементы определенного типа.
////В качестве первого параметра конструктора. Остальные параметры конструктора -- элементы псевдомассива
////В качестве типа могут выступать примитивные типы: number, string, boolean, тип object, либо класс, например Date
////Класс должен реализовывать следующие возможности массивов:
//// доступ к элементам по индексу
//// свойство length
//// методы push/pop, shift/unshift, slice, splice,  sort, indexOf/lastIndexOf, includes, join, concat
//// перебирающие методы forEach, reduce
//// Сигнатуры с действия методов аналогичны методам стандартных массивов
//// При попытке добавления в псевдо массив элементов с другим типом должно срабатывать исключение.
//// Стандартные массивы использовать ЗАПРЕЩАЕТСЯ

//3
////Необходимо создать модуль, который используя функциональный стиль описывает класс SortedList
////Класс является наследником от класса TypedArray, и используется для создания псевдомассивов, элементы в которых отсортированы.
////Порядок сортировки задается через функцию compareFunction(a, b), которая задается через первый параметр конструктора.
////compareFunction аналогична compareFunction для метода sort класса Array. Если функция не задана, то объекты не сортируются
////второй параметр конструктора -- тип элементов псевдомассива. остальные -- элементы псевдомассива
////Класс должен реализовывать следующие возможности:
//// свойство length и методы  indexOf/lastIndexOf, includes, join -- аналогичные методам класса CustomArray
//// метод add(elem) -- добавляет элемент  в отсортированный псевдомассив. метод должен сам определять место и аставлять туда элемент.
//// (Вставка в конец и сортировка после этого -- плохой подход)
//// метод addRange() может принимать от одного и болоее аргументов. Если аргумент не массив то добавляет его в текущий псевдомассив.
//// если моссив то добавляет в псевдомассив все элементы массива
//// remove(elem) - удаляет элемент из псевдомассива, элементы сдвигаются
//// remove(pisition) - удаляет элемент из указанной позиции псевдомассива, элементы сдвигаются
//// removeRange(begin, count) -- удаляет count элементов начиная с begin позиции, элементы сдвигаются
//// elementAt(position) -- возвращает элемент с указанной позицией
//// toArray() -- возвращает массив содержащий все элементы псевдомассива
//// sort(compareFunction(a, b)) изменяет порядок элементов в псевдомассиве.
//// перебирающие методы forEach, reduce

//4
////Выполните задание 1 в прототипном стиле

//5 
////Выполните задание 2 в прототипном стиле

//6
////Выполните задание 3 в прототипном стиле

//7
////Необходимо создать модуль, в описана библиотека JArray. Сокращенно $A.
////библиотека работает по принципу JQuery. Добавляет различные свойства и методы к массивам и псевдомассивам если такиз свойств там нет.
////библиотека добавляет к псевдомассивам методы forEach, map, filter, every, some, reduce/reduceRight
////свойство actualLength которое хранит текущее количество элементов а не номар последнего+1
////пример использования
//function(){
//	JArray.map(arguments, function(item,i, array){})
//	JArray(arguments).map(function(item,i, array){})
//	$A.map(arguments, function(item,i, array){})
//	$A(arguments).map(function(item,i, array){})
//}